{"version":3,"sources":["js/constants.js","js/utils.js","js/Sound.js","js/PhoneticWord.js","js/main.js"],"names":["vowels","doubleSoundVowels","softeningLetters","deafConsonants","voicedConsonants","apiURL","letterToSound","getWordStressPosition","word","fetch","then","response","json","data","VowelSound","letter","positionRelativeToStressed","isBeginning","value","determineValue","includes","full","stressed","firstUnstressed","unstressed","ConsonantSound","isSoft","isVoiced","soft","hard","deaf","PhoneticWord","stressPotion","toLowerCase","sounds","stressPosition","parseWord","letters","split","i","length","push","relativePositionToStressed","i2","result","map","soundRepresentation","join","transcribe","Promise","resolve","wordRepresentation","console","log","window","addEventListener","button","document","getElementById","classList","add","innerText","remove"],"mappings":"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","file":"main.9e071623.js","sourceRoot":"..","sourcesContent":["export const vowels = 'ауеыоэяию';\nexport const doubleSoundVowels = 'еяюё';\nexport const softeningLetters = 'еёяиюь';\nexport const deafConsonants = 'пфктсшхчцщ';\nexport const voicedConsonants = 'бвгдзжлмнрй';\n\nexport const apiURL = 'https://word-stresses.herokuapp.com/get_word_stress';\n\nexport const letterToSound = {\n  \"а\": {\n    \"stressed\": \"а'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"б\": {\n    \"voiced\": \"б\",\n    \"deaf\": \"п\",\n    \"soft\": \"б'\",\n    \"hard\": \"б\"\n  },\n  \"в\": {\n    \"voiced\": \"в\",\n    \"deaf\": \"ф\",\n    \"soft\": \"в'\",\n    \"hard\": \"в\"\n  },\n  \"г\": {\n    \"voiced\": \"г\",\n    \"deaf\": \"к\",\n    \"soft\": \"г'\",\n    \"hard\": \"г\"\n  },\n  \"д\": {\n    \"voiced\": \"д\",\n    \"deaf\": \"т\",\n    \"soft\": \"д'\",\n    \"hard\": \"д\"\n  },\n  \"е\": {\n    \"full\": \"jэ\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"иэ\"\n  },\n  \"ё\": {\n    \"full\": \"jо\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"ж\": {\n    \"voiced\": \"ж\",\n    \"deaf\": \"ш\",\n    \"hard\": \"ж\"\n  },\n  \"з\": {\n    \"voiced\": \"з\",\n    \"deaf\": \"с\",\n    \"soft\": \"з'\",\n    \"hard\": \"з\"\n  },\n  \"и\": {\n    \"stressed\": \"и'\",\n    \"unstressed\": \"и\",\n    \"firstUnstressed\": \"и\"\n  },\n  \"й\": {\n    \"soft\": \"j'\",\n    \"hard\": \"\"\n  },\n  \"к\": {\n    \"soft\": \"к'\",\n    \"hard\": \"к\"\n  },\n  \"л\": {\n    \"soft\": \"л'\",\n    \"hard\": \"л\"\n  },\n  \"м\": {\n    \"soft\": \"м'\",\n    \"hard\": \"м\"\n  },\n  \"н\": {\n    \"soft\": \"н'\",\n    \"hard\": \"н\"\n  },\n  \"о\": {\n    \"stressed\": \"о'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"п\": {\n    \"soft\": \"п'\",\n    \"hard\": \"п\"\n  },\n  \"р\": {\n    \"soft\": \"р'\",\n    \"hard\": \"р\"\n  },\n  \"с\": {\n    \"soft\": \"с'\",\n    \"hard\": \"с\"\n  },\n  \"т\": {\n    \"soft\": \"т'\",\n    \"hard\": \"т\"\n  },\n  \"у\": {\n    \"stressed\": \"у'\",\n    \"unstressed\": \"у\"\n  },\n  \"ф\": {\n    \"soft\": \"ф'\",\n    \"hard\": \"ф\"\n  },\n  \"х\": {\n    \"soft\": \"х'\",\n    \"hard\": \"х\"\n  },\n  \"ц\": {\n    \"soft\": \"ц\",\n    \"hard\": \"ц\"\n  },\n  \"ч\": {\n    \"soft\": \"ч'\",\n    \"hard\": \"ч'\"\n  },\n  \"ш\": {\n    \"soft\": \"ш\",\n    \"hard\": \"ш\"\n  },\n  \"щ\": {\n    \"soft\": \"щ'\",\n    \"hard\": \"щ'\"\n  },\n  \"ъ\": \"\",\n  \"ы\": {\n    \"stressed\": \"ы'\",\n    \"unstressed\": \"ы\"\n  },\n  \"ь\": \"\",\n  \"э\": {\n    \"stressed\": \"э'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"иэ\"\n  },\n  \"ю\": {\n    \"full\": \"jу\",\n    \"unstressed\": \"у\"\n  },\n  \"я\": {\n    \"full\": \"jа\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  }\n}\n","import {apiURL} from \"./constants.js\";\n\n\nexport function getWordStressPosition(word) {\n  return fetch(`${apiURL}/${word}`).then(response => response.json()).then(data => data);\n}\n","import {letterToSound, doubleSoundVowels} from \"./constants.js\";\n\n\nexport class VowelSound {\n  constructor(letter, positionRelativeToStressed, isBeginning) {\n    this.letter = letter;\n    this.positionRelativeToStressed = positionRelativeToStressed;\n    this.value = 'UNK';\n    this.isBeginning = isBeginning;\n    this.determineValue();\n  }\n\n  determineValue() {\n\n    if (this.isBeginning && doubleSoundVowels.includes(this.letter)) {\n      this.value = letterToSound[this.letter].full;\n      return;\n    }\n\n    switch (this.positionRelativeToStressed) {\n      case 0:\n        // Stressed\n        this.value = letterToSound[this.letter].stressed;\n        break;\n      case -1:\n        // Right before the stressed syllable\n        this.value = letterToSound[this.letter].firstUnstressed;\n        break;\n      default:\n        // Unstressed and not right before the stressed syllable\n        this.value = letterToSound[this.letter].unstressed;\n        break;\n    }\n  }\n}\n\n\nexport class ConsonantSound {\n  constructor(letter, isSoft, isVoiced) {\n    this.letter = letter;\n    this.isSoft = isSoft;\n    this.isVoiced = isVoiced;\n    this.value = 'UNK';\n    this.determineValue();\n  }\n\n  determineValue() {\n    if (!this.isVoiced) {\n      this.value = letterToSound[this.letter].deaf || letterToSound[this.letter].hard;\n    } else {\n      this.value = this.isSoft ? letterToSound[this.letter].soft : letterToSound[this.letter].hard\n    }\n  }\n}\n","import {ConsonantSound, VowelSound} from \"./Sound.js\";\nimport {vowels, softeningLetters, deafConsonants} from \"./constants.js\";\n\n\nexport class PhoneticWord {\n  constructor(word, stressPotion) {\n    this.word = word.toLowerCase();\n    this.sounds = [];\n    this.stressPosition = stressPotion;\n    this.parseWord();\n  }\n\n  parseWord() {\n    const letters = this.word.split('');\n    for (let i = 0; i < letters.length; i++) {\n      const letter = letters[i];\n      const isBeginning = i === 0;\n\n      // Vowels\n      if (vowels.includes(letter)) {\n\n        if ((i - this.stressPosition) === 0) {\n          // The current vowel is the stressed vowel\n          this.sounds.push(new VowelSound(letter, 0, isBeginning));\n          continue;\n        } else if (i > this.stressPosition) {\n          // The current vowel is after the stressed one\n          this.sounds.push(new VowelSound(letter, 1, isBeginning));\n          continue;\n        }\n\n        // Assume that the current vowel is in the previous syllable relative to\n        // the syllable with the stressed vowel\n        let relativePositionToStressed = -1;\n\n        for (let i2 = i + 1; i2 < this.stressPosition; i2++) {\n          // If there is one/more vowels between the current letter and the stressed one\n          // Then the current vowel is \"far\" before the stressed one\n          if (vowels.includes(letters[i2])) {\n            relativePositionToStressed = -2\n            break;\n          }\n        }\n\n        this.sounds.push(new VowelSound(letter, relativePositionToStressed, isBeginning));\n        continue;\n      }\n\n      // Consonants\n      if (i === letters.length) {\n        // Last\n        this.sounds.push(new ConsonantSound(letter, false, false));\n      } else if (softeningLetters.includes(letters[i + 1])) {\n        // Next is the softening letter\n        this.sounds.push(new ConsonantSound(letter, true, true));\n      } else if (deafConsonants.includes(letters[i + 1])) {\n        // Next is the deaf consonant => the consonant becomes deaf\n        this.sounds.push(new ConsonantSound(letter, false, false))\n      } else {\n        // Next is the non-softening nor the deaf consonant\n        this.sounds.push(new ConsonantSound(letter, false, true));\n      }\n    }\n  }\n\n  get value() {\n    const result = this.sounds.map(soundRepresentation => soundRepresentation.value);\n    return `[${result.join('')}]`;\n  }\n}\n","import {getWordStressPosition} from \"./utils.js\";\nimport {PhoneticWord} from \"./PhoneticWord.js\";\n\nfunction transcribe(word) {\n  return new Promise(function (resolve) {\n    getWordStressPosition(word).then(data => {\n      const wordRepresentation = new PhoneticWord(word, data['stress']);\n      console.log(`Stress position: ${wordRepresentation.stressPosition}`);\n      resolve(wordRepresentation.value);\n    });\n  });\n}\n\n\nwindow.addEventListener('load', function () {\n  const button = document.getElementById('transcribe');\n  button.addEventListener('click',  () => {\n    const word = document.getElementById('input-text').value.toLowerCase();\n\n    // Disable button\n    button.classList.add('disabled');\n\n    transcribe(word).then((result) => {\n      const resultTextContainer = document.getElementById('result');\n      resultTextContainer.innerText = result;\n\n      document.getElementById('result-container').classList.remove('invisible');\n      button.classList.remove('disabled');\n    });\n  });\n})\n"]}