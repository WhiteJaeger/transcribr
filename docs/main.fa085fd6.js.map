{"version":3,"sources":["js/constants.js","js/utils.js","js/Sound.js","js/PhoneticWord.js","js/main.js"],"names":["vowels","doubleSoundVowels","softeningLetters","deafConsonants","voicedConsonants","apiURL","letterToSound","getWordStressPosition","word","fetch","then","response","json","data","VowelSound","letter","positionRelativeToStressed","isBeginning","afterVowel","value","isDoubleSound","includes","determineValue","full","stressed","firstUnstressed","unstressed","ConsonantSound","isSoft","isVoiced","soft","hard","deaf","findVowelPosition","vowel","position","indexOf","PhoneticWord","stressPotion","toLowerCase","sounds","stressPosition","parseWord","letters","split","i","length","push","relativePositionToStressed","i2","_stressPosition","result","map","soundRepresentation","join","transcribe","Promise","resolve","wordRepresentation","window","addEventListener","button","document","getElementById","classList","add","innerText","remove"],"mappings":"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","file":"main.fa085fd6.js","sourceRoot":"..","sourcesContent":["export const vowels = 'ауеыоэяию';\nexport const doubleSoundVowels = 'еяюё';\nexport const softeningLetters = 'еёяиюь';\nexport const deafConsonants = 'пфктсшхчцщ';\nexport const voicedConsonants = 'бвгдзжлмнрй';\n\nexport const apiURL = 'https://word-stresses.herokuapp.com/get_word_stress';\n\nexport const letterToSound = {\n  \"а\": {\n    \"stressed\": \"а'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"б\": {\n    \"voiced\": \"б\",\n    \"deaf\": \"п\",\n    \"soft\": \"б'\",\n    \"hard\": \"б\"\n  },\n  \"в\": {\n    \"voiced\": \"в\",\n    \"deaf\": \"ф\",\n    \"soft\": \"в'\",\n    \"hard\": \"в\"\n  },\n  \"г\": {\n    \"voiced\": \"г\",\n    \"deaf\": \"к\",\n    \"soft\": \"г'\",\n    \"hard\": \"г\"\n  },\n  \"д\": {\n    \"voiced\": \"д\",\n    \"deaf\": \"т\",\n    \"soft\": \"д'\",\n    \"hard\": \"д\"\n  },\n  \"е\": {\n    \"full\": \"jэ\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"иэ\"\n  },\n  \"ё\": {\n    \"full\": \"jо\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"ж\": {\n    \"voiced\": \"ж\",\n    \"deaf\": \"ш\",\n    \"hard\": \"ж\"\n  },\n  \"з\": {\n    \"voiced\": \"з\",\n    \"deaf\": \"с\",\n    \"soft\": \"з'\",\n    \"hard\": \"з\"\n  },\n  \"и\": {\n    \"stressed\": \"и'\",\n    \"unstressed\": \"и\",\n    \"firstUnstressed\": \"и\"\n  },\n  \"й\": {\n    \"soft\": \"j'\",\n    \"hard\": \"j'\"\n  },\n  \"к\": {\n    \"soft\": \"к'\",\n    \"hard\": \"к\"\n  },\n  \"л\": {\n    \"soft\": \"л'\",\n    \"hard\": \"л\"\n  },\n  \"м\": {\n    \"soft\": \"м'\",\n    \"hard\": \"м\"\n  },\n  \"н\": {\n    \"soft\": \"н'\",\n    \"hard\": \"н\"\n  },\n  \"о\": {\n    \"stressed\": \"о'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  },\n  \"п\": {\n    \"soft\": \"п'\",\n    \"hard\": \"п\"\n  },\n  \"р\": {\n    \"soft\": \"р'\",\n    \"hard\": \"р\"\n  },\n  \"с\": {\n    \"soft\": \"с'\",\n    \"hard\": \"с\"\n  },\n  \"т\": {\n    \"soft\": \"т'\",\n    \"hard\": \"т\"\n  },\n  \"у\": {\n    \"stressed\": \"у'\",\n    \"unstressed\": \"у\"\n  },\n  \"ф\": {\n    \"soft\": \"ф'\",\n    \"hard\": \"ф\"\n  },\n  \"х\": {\n    \"soft\": \"х'\",\n    \"hard\": \"х\"\n  },\n  \"ц\": {\n    \"soft\": \"ц\",\n    \"hard\": \"ц\"\n  },\n  \"ч\": {\n    \"soft\": \"ч'\",\n    \"hard\": \"ч'\"\n  },\n  \"ш\": {\n    \"soft\": \"ш\",\n    \"hard\": \"ш\"\n  },\n  \"щ\": {\n    \"soft\": \"щ'\",\n    \"hard\": \"щ'\"\n  },\n  \"ъ\": \"\",\n  \"ы\": {\n    \"stressed\": \"ы'\",\n    \"unstressed\": \"ы\"\n  },\n  \"ь\": \"\",\n  \"э\": {\n    \"stressed\": \"э'\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"иэ\"\n  },\n  \"ю\": {\n    \"full\": \"jу\",\n    \"unstressed\": \"у\"\n  },\n  \"я\": {\n    \"full\": \"jа\",\n    \"unstressed\": \"ъ\",\n    \"firstUnstressed\": \"ʌ\"\n  }\n}\n","import {apiURL} from \"./constants.js\";\n\n\nexport function getWordStressPosition(word) {\n  return fetch(`${apiURL}/${word}`).then(response => response.json()).then(data => data);\n}\n","import {letterToSound, doubleSoundVowels} from \"./constants.js\";\n\n\nexport class VowelSound {\n  constructor(letter, positionRelativeToStressed, isBeginning, afterVowel) {\n    this.letter = letter;\n    this.positionRelativeToStressed = positionRelativeToStressed;\n    this.value = 'UNK';\n    this.isBeginning = isBeginning;\n    this.afterVowel = afterVowel;\n    this.isDoubleSound = doubleSoundVowels.includes(this.letter);\n    this.determineValue();\n  }\n\n  determineValue() {\n\n    if (this.isDoubleSound) {\n      if (this.isBeginning || this.afterVowel) {\n        this.value = letterToSound[this.letter].full;\n        return;\n      }\n    }\n\n    switch (this.positionRelativeToStressed) {\n      case 0:\n        // Stressed\n        this.value = letterToSound[this.letter].stressed;\n        break;\n      case -1:\n        // Right before the stressed syllable\n        this.value = letterToSound[this.letter].firstUnstressed;\n        break;\n      default:\n        // Unstressed and not right before the stressed syllable\n        this.value = letterToSound[this.letter].unstressed;\n        break;\n    }\n  }\n}\n\n\nexport class ConsonantSound {\n  constructor(letter, isSoft, isVoiced) {\n    this.letter = letter;\n    this.isSoft = isSoft;\n    this.isVoiced = isVoiced;\n    this.value = 'UNK';\n    this.determineValue();\n  }\n\n  determineValue() {\n    if (!this.isVoiced) {\n      this.value = letterToSound[this.letter].deaf || letterToSound[this.letter].hard;\n    } else {\n      this.value = this.isSoft ? letterToSound[this.letter].soft : letterToSound[this.letter].hard\n    }\n  }\n}\n","import {ConsonantSound, VowelSound} from \"./Sound.js\";\nimport {vowels, softeningLetters, deafConsonants} from \"./constants.js\";\n\n\nfunction findVowelPosition(word) {\n  // For single syllable words or\n  // words that were not found in the database\n  for (const vowel of vowels) {\n    const position = word.indexOf(vowel);\n    if (position !== -1) {\n      return position;\n    }\n  }\n  return -1;\n}\n\n\nexport class PhoneticWord {\n  constructor(word, stressPotion) {\n    this.word = word.toLowerCase();\n    this.sounds = [];\n    this.stressPosition = stressPotion;\n    this.parseWord();\n  }\n\n  get stressPosition() {\n    return this._stressPosition;\n  }\n\n  set stressPosition(value) {\n    this._stressPosition = !value ? findVowelPosition(this.word) : value\n  }\n\n  parseWord() {\n    const letters = this.word.split('');\n    for (let i = 0; i < letters.length; i++) {\n      const letter = letters[i];\n\n      // Vowels\n      if (vowels.includes(letter)) {\n\n        const isBeginning = i === 0;\n\n        // Whether the current vowel is preceded by the vowel\n        let afterVowel = null;\n        if (isBeginning) {\n          afterVowel = false;\n        } else afterVowel = vowels.includes(letters[i - 1]);\n\n        if ((i - this.stressPosition) === 0) {\n          // The current vowel is the stressed vowel\n          this.sounds.push(new VowelSound(letter, 0, isBeginning, afterVowel));\n          continue;\n        } else if (i > this.stressPosition) {\n          // The current vowel is after the stressed one\n          this.sounds.push(new VowelSound(letter, 1, isBeginning, afterVowel));\n          continue;\n        }\n\n        // Assume that the current vowel is in the previous syllable relative to\n        // the syllable with the stressed vowel\n        let relativePositionToStressed = -1;\n\n        for (let i2 = i + 1; i2 < this.stressPosition; i2++) {\n          // If there is one/more vowels between the current letter and the stressed one\n          // Then the current vowel is \"far\" before the stressed one\n          if (vowels.includes(letters[i2])) {\n            relativePositionToStressed = -2\n            break;\n          }\n        }\n\n        this.sounds.push(new VowelSound(letter, relativePositionToStressed, isBeginning, afterVowel));\n        continue;\n      }\n\n      // Consonants\n      if (i === letters.length - 1) {\n        // Last\n        this.sounds.push(new ConsonantSound(letter, false, false));\n      } else if (softeningLetters.includes(letters[i + 1])) {\n        // Next is the softening letter\n        this.sounds.push(new ConsonantSound(letter, true, true));\n      } else if (deafConsonants.includes(letters[i + 1])) {\n        // Next is the deaf consonant => the consonant becomes deaf\n        this.sounds.push(new ConsonantSound(letter, false, false))\n      } else {\n        // Next is the non-softening nor the deaf consonant\n        this.sounds.push(new ConsonantSound(letter, false, true));\n      }\n    }\n  }\n\n  get value() {\n    const result = this.sounds.map(soundRepresentation => soundRepresentation.value);\n    return `[${result.join('')}]`;\n  }\n}\n","import {getWordStressPosition} from \"./utils.js\";\nimport {PhoneticWord} from \"./PhoneticWord.js\";\n\nfunction transcribe(word) {\n  return new Promise(function (resolve) {\n    getWordStressPosition(word).then(data => {\n      const wordRepresentation = new PhoneticWord(word, data['stress']);\n      resolve(wordRepresentation.value);\n    });\n  });\n}\n\n\nwindow.addEventListener('load', function () {\n  const button = document.getElementById('transcribe');\n  button.addEventListener('click',  () => {\n    const word = document.getElementById('input-text').value.toLowerCase();\n\n    // Disable button\n    button.classList.add('disabled');\n\n    transcribe(word).then((result) => {\n      const resultTextContainer = document.getElementById('result');\n      resultTextContainer.innerText = result;\n\n      document.getElementById('result-container').classList.remove('invisible');\n      button.classList.remove('disabled');\n    });\n  });\n})\n"]}